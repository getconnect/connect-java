allprojects {
    group = GROUP
    version = VERSION_NAME

    repositories {
        mavenCentral()
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it.name.contains("uploadArchives") }) {
        if (project.hasProperty('signing.keyId') &&
                project.hasProperty('signing.secretKeyRingFile') &&
                project.hasProperty('ossrhUsername') &&
                project.hasProperty('ossrhPassword')) {

            println "Found signing properties and OSSRH credentials"
            if (!project.hasProperty('signing.password')) {
                ext."signing.password" = getPassword("Enter GPG secret key passphrase")
            }
        } else {
            throw new GradleScriptException(
                    "Missing required signing configuration. Ensure that you have a " +
                            "gradle.properties file which defines the values 'signing.keyId', " +
                            "'signing.secretKeyRingFile', 'ossrhUsername', and 'ossrhUsername'.", null);
        }
    } else {
        println "No publish tasks; skipping all artifact signing"
        taskGraph.allTasks.findAll {
            it instanceof Sign
        }.each {
            it.enabled = false
        }
    }
}

import groovy.swing.SwingBuilder

// Get a password from either console or dialog. Adapted from:
// https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
String getPassword(String prompt) {
    def pass = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                    title: prompt, // Dialog title
                    alwaysOnTop: true, // pretty much what the name says
                    resizable: false, // Don't allow the user to resize the dialog
                    locationRelativeTo: null, // Place dialog in center of the screen
                    pack: true, // We need to pack the dialog (so it will take the size of it's children)
                    show: true // Let's show it
            ) {
                vbox { // Put everything below each other
                    label(text: prompt)
                    def input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        pass = input.password; // Set pass variable to value of input field
                        dispose(); // Close dialog
                    })
                } // vbox end
            } // dialog end
        } // edt end
    } else {
        pass = System.console().readPassword("\n" + prompt + ": ")
    }

    pass = new String(pass)
    if (pass.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }

    return pass
}